/*

This code is generated by meta/scalar_matrix_mul.py at 21:08:28 @ 2025.01.02
Do not modify it directly.

*/
use crate::Ad;
use na::SMatrix;
use std::ops::Mul;

impl<const N: usize, const R: usize, const C: usize> Mul<SMatrix<Ad<N>, R, C>> for Ad<N> {
    type Output = SMatrix<Ad<N>, R, C>;

    fn mul(self, rhs: SMatrix<Ad<N>, R, C>) -> Self::Output {
        let mut res = rhs.clone();
        res *= self.clone();
        return res;
    }
}

impl<const N: usize, const R: usize, const C: usize> Mul<SMatrix<Ad<N>, R, C>> for &Ad<N> {
    type Output = SMatrix<Ad<N>, R, C>;

    fn mul(self, rhs: SMatrix<Ad<N>, R, C>) -> Self::Output {
        let mut res = rhs.clone();
        res *= self.clone();
        return res;
    }
}

impl<const N: usize, const R: usize, const C: usize> Mul<&SMatrix<Ad<N>, R, C>> for Ad<N> {
    type Output = SMatrix<Ad<N>, R, C>;

    fn mul(self, rhs: &SMatrix<Ad<N>, R, C>) -> Self::Output {
        let mut res = rhs.clone();
        res *= self.clone();
        return res;
    }
}

impl<const N: usize, const R: usize, const C: usize> Mul<&SMatrix<Ad<N>, R, C>> for &Ad<N> {
    type Output = SMatrix<Ad<N>, R, C>;

    fn mul(self, rhs: &SMatrix<Ad<N>, R, C>) -> Self::Output {
        let mut res = rhs.clone();
        res *= self.clone();
        return res;
    }
}
